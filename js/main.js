/**
 * QuizForge - Main Application
 * –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ index.html
 */

import CONFIG from './config.js';
import Analytics from './analytics.js';

class QuizForgeApp {
    constructor() {
        this.tests = [];
        this.filteredTests = [];
        this.init();
    }

    async init() {
        console.log('üöÄ QuizForge v' + CONFIG.VERSION);
        
        try {
            await this.loadTests();
            this.renderTests();
            this.setupEventListeners();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–µ—Å—Ç–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.');
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤
     */
    async loadTests() {
        try {
            const response = await fetch(CONFIG.PATHS.TESTS_INDEX);
            if (!response.ok) throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–µ—Å—Ç–∏');
            
            const data = await response.json();
            this.tests = data.tests || [];
            this.filteredTests = [...this.tests];
            
            console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.tests.length} —Ç–µ—Å—Ç—ñ–≤`);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤:', error);
            
            // Fallback: —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –Ω–∞–±—ñ—Ä
            this.tests = this.createDemoTests();
            this.filteredTests = [...this.tests];
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ-—Ç–µ—Å—Ç–∏ (—è–∫—â–æ JSON –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è)
     */
    createDemoTests() {
        return [
            {
                id: 'demo-test',
                title: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç',
                description: '–¢–µ—Å—Ç–æ–≤–∏–π –Ω–∞–±—ñ—Ä –ø–∏—Ç–∞–Ω—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏',
                icon: 'üéØ',
                category: 'demo',
                totalQuestions: 10,
                estimatedTime: '5 —Ö–≤',
                difficulty: 'easy'
            }
        ];
    }

    /**
     * –í—ñ–¥—Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–∏
     */
    renderTests() {
        const catalog = document.getElementById('tests-catalog');
        
        if (this.filteredTests.length === 0) {
            catalog.innerHTML = `
                <div class="loading">
                    –¢–µ—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏.
                </div>
            `;
            return;
        }

        catalog.innerHTML = this.filteredTests.map(test => this.createTestCard(test)).join('');
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É —Ç–µ—Å—Ç—É
     */
    createTestCard(test) {
        const stats = Analytics.getTestStats(test.id);
        const statsHTML = stats ? `
            <div class="test-stats">
                <span>üìä –°–ø—Ä–æ–±: ${stats.attempts}</span>
                <span>üèÜ –ù–∞–π–∫—Ä–∞—â–µ: ${stats.bestScore}%</span>
            </div>
        ` : '';

        return `
            <div class="test-card" data-test-id="${test.id}">
                <div class="test-icon">${test.icon || 'üìù'}</div>
                <h2>${test.title}</h2>
                <p>${test.description}</p>
                <div class="test-meta">
                    <span>üìä ${test.totalQuestions} –ø–∏—Ç–∞–Ω—å</span>
                    <span>‚è±Ô∏è ${test.estimatedTime}</span>
                    <span class="difficulty-badge difficulty-${test.difficulty}">
                        ${this.getDifficultyLabel(test.difficulty)}
                    </span>
                </div>
                ${statsHTML}
                <a href="quiz.html?test=${test.id}" class="btn-start">
                    –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç ‚Üí
                </a>
            </div>
        `;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Ç–∫—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
     */
    getDifficultyLabel(difficulty) {
        const labels = {
            easy: '–õ–µ–≥–∫–∏–π',
            medium: '–°–µ—Ä–µ–¥–Ω—ñ–π',
            hard: '–°–∫–ª–∞–¥–Ω–∏–π'
        };
        return labels[difficulty] || '–°–µ—Ä–µ–¥–Ω—ñ–π';
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
     */
    setupEventListeners() {
        // –ü–æ—à—É–∫
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));
        }

        // –§—ñ–ª—å—Ç—Ä–∏
        const categoryFilter = document.getElementById('category-filter');
        const difficultyFilter = document.getElementById('difficulty-filter');
        
        if (categoryFilter) {
            categoryFilter.addEventListener('change', () => this.applyFilters());
        }
        
        if (difficultyFilter) {
            difficultyFilter.addEventListener('change', () => this.applyFilters());
        }

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        const statsBtn = document.getElementById('stats-btn');
        const settingsBtn = document.getElementById('settings-btn');
        
        if (statsBtn) {
            statsBtn.addEventListener('click', () => this.showStats());
        }
        
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => this.showSettings());
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É
     */
    handleSearch(query) {
        const lowercaseQuery = query.toLowerCase();
        
        this.filteredTests = this.tests.filter(test => 
            test.title.toLowerCase().includes(lowercaseQuery) ||
            test.description.toLowerCase().includes(lowercaseQuery)
        );
        
        this.renderTests();
    }

    /**
     * –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
     */
    applyFilters() {
        const category = document.getElementById('category-filter')?.value;
        const difficulty = document.getElementById('difficulty-filter')?.value;
        
        this.filteredTests = this.tests.filter(test => {
            const categoryMatch = !category || category === 'all' || test.category === category;
            const difficultyMatch = !difficulty || difficulty === 'all' || test.difficulty === difficulty;
            return categoryMatch && difficultyMatch;
        });
        
        this.renderTests();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    showStats() {
        alert('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó! üìä');
        // TODO: –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
     */
    showSettings() {
        alert('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó! ‚öôÔ∏è');
        // TODO: –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
     */
    showError(message) {
        const catalog = document.getElementById('tests-catalog');
        catalog.innerHTML = `
            <div class="loading" style="color: var(--accent-red);">
                ‚ùå ${message}
            </div>
        `;
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    new QuizForgeApp();
});