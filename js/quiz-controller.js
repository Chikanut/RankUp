/**
 * QuizController - –≥–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 * –ö–µ—Ä—É—î –µ–∫—Ä–∞–Ω–∞–º–∏: mode-select ‚Üí setup ‚Üí quiz ‚Üí results
 */

import pluginRegistry from './plugins/registry.js';

class QuizController {
  constructor() {
    this.masterConfig = null;
    this.testData = null;
    this.testId = null;
    this.supportedPlugins = [];
    this.currentPlugin = null;
    this.currentScreen = null;
  }
  
  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
   */
  async initialize() {
    console.log('üöÄ Initializing Quiz Controller...');
    
    // –û—Ç—Ä–∏–º–∞—Ç–∏ testId –∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    this.testId = urlParams.get('test');
    
    if (!this.testId) {
      this.showError('–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Ç–µ—Å—Ç—É. –ü–∞—Ä–∞–º–µ—Ç—Ä ?test=... –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return;
    }
    
    console.log(`üìù Test ID: ${this.testId}`);
    
    try {
      // 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ master config
      await this.loadMasterConfig();
      
      // 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä –ø–ª–∞–≥—ñ–Ω—ñ–≤
      await pluginRegistry.initialize(this.masterConfig);
      
      // 3. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —Ç–µ—Å—Ç—É
      await this.loadTestData();
      
      // 4. –ó–Ω–∞–π—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∏
      this.supportedPlugins = pluginRegistry.getSupportedPlugins(this.testData);
      
      // 5. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É (–∞–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–∞—Ç–∏ —è–∫—â–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω)
      this.showModeSelection();
      
    } catch (error) {
      console.error('‚ùå Initialization failed:', error);
      this.showError(`–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ${error.message}`);
    }
  }
  
  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ master config
   */
  async loadMasterConfig() {
    console.log('üì• Loading master config...');
    
    const response = await fetch('data/tests.json');
    if (!response.ok) {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ç–µ—Å—Ç—ñ–≤');
    }
    
    this.masterConfig = await response.json();
    console.log(`‚úÖ Loaded config v${this.masterConfig.version}`);
  }
  
  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —Ç–µ—Å—Ç—É
   */
  async loadTestData() {
    console.log(`üì• Loading test data for: ${this.testId}`);
    
    // –ó–Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç –≤ –∫–æ–Ω—Ñ—ñ–≥—É
    const testConfig = this.masterConfig.tests.find(t => t.id === this.testId);
    
    if (!testConfig) {
      throw new Error(`–¢–µ—Å—Ç "${this.testId}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó`);
    }
    
    if (!testConfig.enabled) {
      throw new Error(`–¢–µ—Å—Ç "${this.testId}" –≤–∏–º–∫–Ω–µ–Ω–æ`);
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
    const response = await fetch(testConfig.dataFile);
    if (!response.ok) {
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —Ç–µ—Å—Ç—É: ${testConfig.dataFile}`);
    }
    
    this.testData = await response.json();
    console.log(`‚úÖ Loaded ${this.testData.questions.length} questions`);
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É
   */
  showModeSelection() {
    console.log('üéÆ Showing mode selection...');
    
    // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤
    if (this.supportedPlugins.length === 0) {
      this.showScreen('mode-select');
      const container = document.getElementById('mode-select');
      container.innerHTML = `
        <div class="error-screen">
          <div class="error-icon">‚ùå</div>
          <h2>–ù–µ–º–∞—î –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤</h2>
          <p>–¶–µ–π —Ç–µ—Å—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∂–æ–¥–µ–Ω –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.</p>
          <p class="muted">–¢–µ—Å—Ç: ${this.testData.meta.title}</p>
          <button class="btn-primary" onclick="window.location.href='index.html'">
            ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç—ñ–≤
          </button>
        </div>
      `;
      return;
    }
    
    // –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–µ–∂–∏–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–∞—Ç–∏
    if (this.supportedPlugins.length === 1) {
      console.log('‚ÑπÔ∏è  Only one mode available, auto-selecting...');
      this.selectMode(this.supportedPlugins[0]);
      return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É
    this.showScreen('mode-select');
    this.renderModeSelection();
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä –µ–∫—Ä–∞–Ω—É –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É
   */
  renderModeSelection() {
    const container = document.getElementById('mode-select');
    
    container.innerHTML = `
      <div class="mode-select-container">
        <div class="mode-header">
          <button class="btn-back" onclick="window.location.href='index.html'">
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <div>
            <h1>–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è</h1>
            <p class="muted">${this.testData.meta.title}</p>
          </div>
        </div>
        
        <div class="mode-grid">
          ${this.supportedPlugins.map((item, index) => `
            <div class="mode-card" data-index="${index}">
              <div class="mode-icon">${item.metadata.icon}</div>
              <h3>${item.metadata.name}</h3>
              <p class="mode-description">${item.metadata.description}</p>
              <div class="mode-stats">
                <span class="badge">
                  ${item.validation.supportedCount} / ${item.validation.totalCount} –ø–∏—Ç–∞–Ω—å
                </span>
                ${item.validation.percentage ? `
                  <span class="badge badge-accent">
                    ${item.validation.percentage}%
                  </span>
                ` : ''}
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
    
    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    container.querySelectorAll('.mode-card').forEach(card => {
      card.addEventListener('click', () => {
        const index = parseInt(card.dataset.index);
        this.selectMode(this.supportedPlugins[index]);
      });
    });
  }
  
  /**
   * –í–∏–±—Ä–∞—Ç–∏ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
   */
  selectMode(pluginItem) {
    console.log(`‚úÖ Selected mode: ${pluginItem.metadata.name}`);
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥—ñ–Ω–∞
    this.currentPlugin = new pluginItem.pluginClass();
    
    // –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
    const filteredQuestions = pluginItem.pluginClass.filterQuestions(this.testData.questions);
    
    console.log(`üìù Filtered ${filteredQuestions.length} supported questions`);
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    this.showScreen('setup');
    this.currentPlugin.renderSetup(
      document.getElementById('setup'),
      this.testData,
      filteredQuestions
    );
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω (–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ)
   */
  showScreen(screenId) {
    console.log(`üñ•Ô∏è  Showing screen: ${screenId}`);
    
    const screens = ['mode-select', 'setup', 'quiz', 'results'];
    
    screens.forEach(id => {
      const el = document.getElementById(id);
      if (el) {
        el.classList.toggle('active', id === screenId);
      }
    });
    
    this.currentScreen = screenId;
  }
  
  /**
   * –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É
   */
  saveResults(results) {
    console.log('üíæ Saving results...', results);
    
    // –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á—É —ñ—Å—Ç–æ—Ä—ñ—é
    const storageKey = `quizforge_${this.testId}_history`;
    let history = [];
    
    try {
      const stored = localStorage.getItem(storageKey);
      if (stored) {
        history = JSON.parse(stored);
      }
    } catch (e) {
      console.error('Failed to load history:', e);
    }
    
    // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultEntry = {
      date: new Date().toISOString(),
      mode: this.currentPlugin.constructor.metadata.id,
      score: results.correctCount,
      total: results.totalQuestions,
      percentage: results.percentage,
      timeSpent: results.timeSpent,
      mistakesCount: results.mistakesCount
    };
    
    history.push(resultEntry);
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏ (–ª—ñ–º—ñ—Ç—É–≤–∞—Ç–∏ –¥–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 50 –∑–∞–ø–∏—Å—ñ–≤)
    if (history.length > 50) {
      history = history.slice(-50);
    }
    
    try {
      localStorage.setItem(storageKey, JSON.stringify(history));
      console.log('‚úÖ Results saved');
    } catch (e) {
      console.error('‚ùå Failed to save results:', e);
    }
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö
    this.saveQuestionStats(results);
  }
  
  /**
   * –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö
   */
  saveQuestionStats(results) {
    const storageKey = `quizforge_${this.testId}_stats`;
    let stats = {};
    
    try {
      const stored = localStorage.getItem(storageKey);
      if (stored) {
        stats = JSON.parse(stored);
      }
    } catch (e) {
      console.error('Failed to load stats:', e);
    }
    
    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    results.questions.forEach((question, index) => {
      const answer = results.userAnswers[index];
      if (!answer) return;
      
      if (!stats[question.id]) {
        stats[question.id] = {
          attempts: 0,
          correct: 0,
          incorrect: 0
        };
      }
      
      stats[question.id].attempts++;
      if (answer.isCorrect) {
        stats[question.id].correct++;
      } else {
        stats[question.id].incorrect++;
      }
    });
    
    try {
      localStorage.setItem(storageKey, JSON.stringify(stats));
      console.log('‚úÖ Question stats saved');
    } catch (e) {
      console.error('‚ùå Failed to save stats:', e);
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
   */
  showError(message) {
    console.error('‚ùå Error:', message);
    
    document.body.innerHTML = `
      <div class="app">
        <div class="error-screen">
          <div class="error-icon">‚ö†Ô∏è</div>
          <h1>–ü–æ–º–∏–ª–∫–∞</h1>
          <p>${message}</p>
          <button class="btn-primary" onclick="window.location.href='index.html'">
            ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
          </button>
        </div>
      </div>
    `;
  }
}

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const quizController = new QuizController();

// –ó—Ä–æ–±–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.quizController = quizController;

export default quizController;
