/**
 * MatchingPlugin - –†–µ–∂–∏–º "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ" –∑ –ø–æ–∫—Ä–æ–∫–æ–≤–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
 */

import BasePlugin from './base-plugin.js';

// –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –Ω–∞–±—ñ—Ä –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –ª—ñ–Ω—ñ–π —Ç–∞ —Ñ–æ–Ω—É
const MATCHING_COLORS = [
    '#3498db', // Blue
    '#2ecc71', // Green
    '#f1c40f', // Yellow
    '#e74c3c', // Red
    '#9b59b6', // Purple
    '#1abc9c', // Turquoise
    '#e67e22', // Orange
    '#34495e', // Dark Blue
    '#95a5a6', // Grey
];

export default class MatchingPlugin extends BasePlugin {
  
  static get metadata() {
    return {
      id: 'matching-stage', // –ó–º—ñ–Ω–µ–Ω–æ ID –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
      name: '–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ (–ü–æ–µ—Ç–∞–ø–Ω–æ)',
      icon: 'üîó',
      description: '–ó—ñ—Å—Ç–∞–≤—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–ª—å–æ—Ä–æ–≤—ñ –ª—ñ–Ω—ñ—ó.'
    };
  }
  
  static supportsQuestion(question) {
    if (!question || !question.question || !Array.isArray(question.answers)) return false;
    return question.answers.some(a => a.isCorrect === true); 
  }
  
  constructor() {
    super();
    this.allSupportedQuestions = [];
    this.testQuestions = [];
    this.config = {};
    
    // –°—Ç–∞–Ω–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –µ—Ç–∞–ø–∞–º–∏ —Ç–∞ –ø–æ–º–∏–ª–∫–∞–º–∏
    this.currentStageIndex = 0;
    this.stageQuestions = []; // –ü–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
    this.stages = []; // –í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è, —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω—ñ –ø–æ –µ—Ç–∞–ø–∞—Ö
    this.globalMistakesCount = 0; // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫
    
    // –°—Ç–∞–Ω –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    this.currentConnections = {}; // { questionId: answerId, ... } - –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this.questionColorMap = {}; // { questionId: color, ... } - –∫–∞—Ä—Ç–∞ –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
    this.activeSelection = null; // ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ (–ø–∏—Ç–∞–Ω–Ω—è)
    this.startTime = null;
    this.stageStartTime = null;
  }
  
  // ==================== SETUP (–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø) ====================
  
  renderSetup(container, testData, questions) {
      this.allSupportedQuestions = questions;
      const allCategories = this.extractCategories(questions);
      const maxQuestions = questions.length;
      
      const categoryCheckboxes = allCategories.map(category => `
        <div class="checkbox-group">
          <input 
            type="checkbox" 
            id="cat-${category}" 
            value="${category}" 
            checked
            class="category-checkbox"
          />
          <label for="cat-${category}">${category}</label>
        </div>
      `).join('');

      container.innerHTML = `
        <div class="setup-container">
          <h2>‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –†–µ–∂–∏–º—É –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ (–ü–æ–µ—Ç–∞–ø–Ω–æ)</h2>
          <p class="muted">–¢–µ–º–∞: ${testData.meta.title}</p>
          <p class="muted" id="questionCountInfo">–î–æ—Å—Ç—É–ø–Ω–æ –ø–∏—Ç–∞–Ω—å: ${maxQuestions}</p>
          
          <div class="setup-grid category-grid-enabled">
            
            <div class="setup-section categories-section">
                <h3>üóÇÔ∏è –í–∏–±—ñ—Ä –ö–∞—Ç–µ–≥–æ—Ä—ñ–π</h3>
                <div class="category-list">
                  <div class="checkbox-group">
                    <input type="checkbox" id="selectAllCategories" checked />
                    <label for="selectAllCategories"><strong>–í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</strong></label>
                  </div>
                  <div class="category-items">
                    ${categoryCheckboxes}
                  </div>
                </div>
            </div>

            <div class="setup-section options-section">
                <h3>–û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏</h3>
                
                <div class="input-group">
                  <label for="totalQuestions">üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å:</label>
                  <input type="number" id="totalQuestions" min="4" max="${maxQuestions}" value="${Math.min(20, maxQuestions)}" />
                  <span class="hint">–°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –ø–∏—Ç–∞–Ω—å –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ.</span>
                </div>

                <div class="input-group">
                  <label for="pairsPerStage">üßÆ –ü–∞—Ä –Ω–∞ –µ—Ç–∞–ø:</label>
                  <input type="number" id="pairsPerStage" min="2" max="10" value="5" />
                  <span class="hint">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä –¥–ª—è –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤ –æ–¥–Ω–æ–º—É –µ—Ç–∞–ø—ñ.</span>
                </div>
                
                 <h3 class="mt-4">–û–ø—Ü—ñ—ó —Ä–µ–∂–∏–º—É</h3>
                 <div class="checkbox-group">
                    <input type="checkbox" id="shuffleQuestions" checked />
                    <label for="shuffleQuestions">
                      <strong>üîÄ –ü–µ—Ä–µ–º—ñ—à–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è</strong>
                      <span class="hint">–í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–∏—Ç–∞–Ω—å.</span>
                    </label>
                 </div>
            </div>
            
          </div>

          <div class="setup-actions">
            <button class="btn-primary btn-large" id="startMatchingTestBtn">
              üöÄ –ü–æ—á–∞—Ç–∏ –¢–µ—Å—Ç
            </button>
            <button class="btn-ghost" id="backToModeBtn">
              ‚Üê –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É
            </button>
          </div>
        </div>
      `;
      
      document.getElementById('startMatchingTestBtn').addEventListener('click', () => {
        this.startTest();
      });
      document.getElementById('backToModeBtn').addEventListener('click', () => {
        window.quizController.showModeSelection(); 
      });

      this.attachCategoryHandlers(allCategories);
  }
  
  getSetupConfig() {
    const selectedCategories = Array.from(document.querySelectorAll('.category-checkbox:checked'))
      .map(cb => cb.value);

    let totalQuestions = parseInt(document.getElementById('totalQuestions')?.value) || 20;
    totalQuestions = Math.max(1, Math.min(totalQuestions, this.allSupportedQuestions.length));

    let pairsPerStage = parseInt(document.getElementById('pairsPerStage')?.value) || 5;
    pairsPerStage = Math.max(2, Math.min(pairsPerStage, 10)); // –û–±–º–µ–∂–µ–Ω–Ω—è 2-10 –ø–∞—Ä

    return {
      totalQuestions,
      pairsPerStage,
      shuffleQuestions: document.getElementById('shuffleQuestions')?.checked ?? true,
      selectedCategories: selectedCategories,
    };
  }

  // ==================== QUIZ (–¢–ï–°–¢–£–í–ê–ù–ù–Ø) ====================
  
  startTest() {
    this.config = this.getSetupConfig();
    
    let questions = this.allSupportedQuestions.filter(q => 
        this.config.selectedCategories.includes(q.category)
    );
    
    if (this.config.shuffleQuestions) {
      questions = this.shuffle(questions);
    }
    
    this.testQuestions = questions.slice(0, this.config.totalQuestions);
    
    if (this.testQuestions.length < this.config.pairsPerStage) {
       alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–∏—Ç–∞–Ω—å –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ—Ç–∞–ø—É. –ó–º–µ–Ω—à—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä –Ω–∞ –µ—Ç–∞–ø –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –±—ñ–ª—å—à–µ –ø–∏—Ç–∞–Ω—å/–∫–∞—Ç–µ–≥–æ—Ä—ñ–π.');
       return;
    }
    
    // –†–æ–∑–ø–æ–¥—ñ–ª –ø–∏—Ç–∞–Ω—å –ø–æ –µ—Ç–∞–ø–∞—Ö
    this.stages = this.chunkArray(this.testQuestions, this.config.pairsPerStage);

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
    this.currentStageIndex = 0;
    this.globalMistakesCount = 0;
    this.startTime = Date.now();
    
    window.quizController.showScreen('quiz');
    this.renderQuizInterface(document.getElementById('quiz'));
    
    this.loadStage(this.currentStageIndex);
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –µ—Ç–∞–ø—É
   */
  loadStage(index) {
    if (index >= this.stages.length) {
      this.finishTest();
      return;
    }
    
    this.currentStageIndex = index;
    this.stageQuestions = this.stages[index];
    this.stageStartTime = Date.now();

    this.currentConnections = {};
    this.activeSelection = null;
    this.questionColorMap = {};

    this.generateStageData();
    this.renderMatchingTask();
    this.updateProgressUI();
  }
  
  /**
   * –ì–µ–Ω–µ—Ä—É—î –¥–∞–Ω—ñ –¥–ª—è –¥–≤–æ—Ö –∫–æ–ª–æ–Ω–æ–∫, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∑–≤'—è–∑–æ–∫ (id).
   */
  generateStageData() {
    const pairingData = this.stageQuestions.map((q, i) => {
        const correctAnswers = q.answers.filter(a => a.isCorrect);
        const correctAnswerText = this.getRandomElement(correctAnswers).text;
        
        // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π –∫–æ–ª—ñ—Ä, —Ñ—ñ–∫—Å—É—é—á–∏ –π–æ–≥–æ –≤ –º–∞–ø—ñ
        const color = MATCHING_COLORS[i % MATCHING_COLORS.length];
        this.questionColorMap[q.id] = color;

        return {
            questionId: q.id, 
            questionText: q.question, 
            answerText: correctAnswerText,
            color
        };
    });

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –ø–µ—Ä–µ–º—ñ—à–∞–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    this.columnA = this.shuffle(pairingData.map(p => ({ id: p.questionId, text: p.questionText, type: 'A', color: p.color })));
    this.columnB = this.shuffle(pairingData.map(p => ({ id: p.questionId, text: p.answerText, type: 'B' })));
  }

  renderQuizInterface(container) {
    this.clearContainer(container);
    
    container.innerHTML = `
      <div class="quiz-container matching-quiz-container">
        <div class="quiz-meta">
          <div class="meta-left">
            <span class="badge">üîó –ï—Ç–∞–ø ${this.currentStageIndex + 1} / ${this.stages.length}</span>
          </div>
          <div class="meta-right">
            <span class="badge" id="progressText">0 / ${this.testQuestions.length} –ø—Ä–æ–π–¥–µ–Ω–æ</span>
            <span class="badge badge-error" id="mistakesCounter">‚úó –ü–æ–º–∏–ª–æ–∫: ${this.globalMistakesCount}</span>
            <span class="badge" id="timeCounter"></span>
          </div>
        </div>
        
        <div class="matching-task-area">
          <div class="matching-column" id="columnA">
              <h3>–ü–∏—Ç–∞–Ω–Ω—è</h3>
          </div>
          
          <svg class="connection-layer" id="connectionLayer"></svg>
          
          <div class="matching-column" id="columnB">
              <h3>–í—ñ–¥–ø–æ–≤—ñ–¥—ñ</h3>
          </div>
        </div>
        
        <div class="quiz-actions mt-5">
            <button class="btn-primary btn-large" id="checkStageBtn">
                ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ
            </button>
            <button class="btn-ghost" id="endEarlyBtn">–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç</button>
        </div>
      </div>
    `;
    
    // –û–±—Ä–æ–±–Ω–∏–∫–∏
    document.getElementById('checkStageBtn').addEventListener('click', () => {
        this.checkStageAnswers();
    });
    document.getElementById('endEarlyBtn').addEventListener('click', () => {
      if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç?')) {
        this.finishTest();
      }
    });
    
    this.startTimer();
  }
  
  startTimer() {
    // –Ø–∫—â–æ —Ç–∞–π–º–µ—Ä –≤–∂–µ –ø—Ä–∞—Ü—é—î, –Ω–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ
    if (this.timer) return; 

    // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è "—á–∞—Å—É, —â–æ –º–∏–Ω—É–≤" (–±–µ–∑ –ª—ñ–º—ñ—Ç—É)
    let seconds = 0;
    this.timer = setInterval(() => {
        seconds++;
        const totalSeconds = Math.round((Date.now() - this.startTime) / 1000);
        const minutes = Math.floor(totalSeconds / 60);
        const remainingSeconds = totalSeconds % 60;
        
        document.getElementById('timeCounter').textContent = 
            `‚è≥ ${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }, 1000);
  }

  renderMatchingTask() {
    const colAEl = document.getElementById('columnA');
    const colBEl = document.getElementById('columnB');
    
    // –†–µ–Ω–¥–µ—Ä –ö–æ–ª–æ–Ω–æ–∫:
    colAEl.innerHTML = `<h3>–ü–∏—Ç–∞–Ω–Ω—è</h3>` + this.columnA.map(item => `
        <button class="matching-item question-item" data-id="${item.id}" data-type="A" 
                style="--item-color: ${item.color};">
            ${item.text}
        </button>
    `).join('');
    
    colBEl.innerHTML = `<h3>–í—ñ–¥–ø–æ–≤—ñ–¥—ñ</h3>` + this.columnB.map(item => `
        <button class="matching-item answer-item" data-id="${item.id}" data-type="B">
            ${item.text}
        </button>
    `).join('');

    this.attachMatchingHandlers();
    
    // –í–∞–∂–ª–∏–≤–æ: –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª—ñ–Ω—ñ–π (—è–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –∑–æ–≤–Ω—ñ—à–Ω—é –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É)
    this.drawCurrentConnections(); 
  }
  
  attachMatchingHandlers() {
      document.querySelectorAll('.matching-item').forEach(item => {
          item.addEventListener('click', (e) => this.handleMatchClick(e.currentTarget));
      });
  }
  
  /**
   * –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É: –ª–æ–≥—ñ–∫–∞ Click-to-Match –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤'—è–∑–∫—É (–ª—ñ–Ω—ñ—ó)
   */
  handleMatchClick(element) {
      const id = element.dataset.id;
      const type = element.dataset.type;

      // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–∏–π, —ñ–≥–Ω–æ—Ä—É—î–º–æ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É)
      if (element.classList.contains('correct') || element.classList.contains('wrong')) return;

      if (type === 'A') { // –ö–ª—ñ–∫ –ø–æ –ø–∏—Ç–∞–Ω–Ω—é (–ö–æ–ª–æ–Ω–∫–∞ –ê)
          
          // –Ø–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è, –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ –π–æ–≥–æ
          if (this.activeSelection === id) {
              this.activeSelection = null;
              element.classList.remove('active-select');
          } else {
              // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∞–∫—Ç–∏–≤–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ —î
              if (this.activeSelection) {
                  document.querySelector(`.question-item[data-id="${this.activeSelection}"]`).classList.remove('active-select');
              }
              // –ê–∫—Ç–∏–≤—É—î–º–æ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è
              this.activeSelection = id;
              element.classList.add('active-select');
          }
          
      } else if (type === 'B') { // –ö–ª—ñ–∫ –ø–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ö–æ–ª–æ–Ω–∫–∞ –ë)
          
          if (!this.activeSelection) return; // –ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –≤ –ö–æ–ª–æ–Ω—Ü—ñ –ê
          
          const qId = this.activeSelection;
          
          // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤'—è–∑–∫—É
          this.currentConnections[qId] = id; 
          
          // –í—ñ–∑—É–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
          document.querySelector(`.question-item[data-id="${qId}"]`).classList.remove('active-select');
          this.activeSelection = null;
          
          this.drawCurrentConnections(); // –ü–µ—Ä–µ–º–∞–ª—é–≤–∞—Ç–∏ –≤—Å—ñ –ª—ñ–Ω—ñ—ó
      }
  }

  /**
   * –í—ñ–∑—É–∞–ª—ñ–∑—É—î –ø–æ—Ç–æ—á–Ω—ñ –∑–≤'—è–∑–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ª—ñ–Ω—ñ—ó)
   * !!! –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–º–∞–≥–∞—î CSS —Ç–∞, –π–º–æ–≤—ñ—Ä–Ω–æ, SVG/Canvas
   */
  drawCurrentConnections() {
      const connectionLayer = document.getElementById('connectionLayer');
      if (!connectionLayer) return;

      // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ª—ñ–Ω—ñ—ó
      connectionLayer.innerHTML = '';
      
      // –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
      document.querySelectorAll('.answer-item').forEach(el => el.style.backgroundColor = '');

      for (const qId in this.currentConnections) {
          const aId = this.currentConnections[qId];
          const questionEl = document.querySelector(`.question-item[data-id="${qId}"]`);
          const answerEl = document.querySelector(`.answer-item[data-id="${aId}"]`);

          if (questionEl && answerEl) {
              const color = this.questionColorMap[qId];
              
              // 1. –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
              answerEl.style.backgroundColor = color + '22'; // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –¥–æ —Ñ–æ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
              
              // 2. –ö–ª–∞—Å –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è, —â–æ –≤–∂–µ –º–∞—î –∑–≤'—è–∑–æ–∫
              questionEl.classList.add('has-connection');

              // 3. –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –º–∞–ª—é–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ—ó SVG/Canvas
              // –û—Å–∫—ñ–ª—å–∫–∏ —è –Ω–µ –º–æ–∂—É –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ SVG-—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é, –º–∏ –æ–±–º–µ–∂–∏–º–æ—Å—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –∫–ª–∞—Å—ñ–≤, 
              // —è–∫—ñ –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–∏–ª—ñ–∑—É–≤–∞—Ç–∏:
              
              // –ü–†–ò–ö–õ–ê–î (–ø—Ä–∏–ø—É—Å–∫–∞—î, —â–æ –≤–∏ —Ä–µ–∞–ª—ñ–∑—É—î—Ç–µ –ª—ñ–Ω—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é CSS::after –∞–±–æ JS-SVG)
              
              const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
              // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ—ó: –∫–æ–ª—ñ—Ä, —Ç–æ–≤—â–∏–Ω–∞
              line.setAttribute('stroke', color); 
              line.setAttribute('stroke-width', 2);
              
              // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
              const qRect = questionEl.getBoundingClientRect();
              const aRect = answerEl.getBoundingClientRect();
              const layerRect = connectionLayer.getBoundingClientRect();

              // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: –ø–æ—á–∞—Ç–æ–∫ –ª—ñ–Ω—ñ—ó (—Ü–µ–Ω—Ç—Ä –ø—Ä–∞–≤–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ –ø–∏—Ç–∞–Ω–Ω—è)
              const x1 = qRect.right - layerRect.left;
              const y1 = qRect.top + qRect.height / 2 - layerRect.top;

              // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: –∫—ñ–Ω–µ—Ü—å –ª—ñ–Ω—ñ—ó (—Ü–µ–Ω—Ç—Ä –ª—ñ–≤–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)
              const x2 = aRect.left - layerRect.left;
              const y2 = aRect.top + aRect.height / 2 - layerRect.top;

              line.setAttribute('x1', x1);
              line.setAttribute('y1', y1);
              line.setAttribute('x2', x2);
              line.setAttribute('y2', y2);
              
              connectionLayer.appendChild(line);
          }
      }
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ"
   */
  checkStageAnswers() {
      let stageCorrectCount = 0;
      let stageMistakes = 0;
      const totalPairs = this.stageQuestions.length;

      // –í–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
      document.getElementById('checkStageBtn').disabled = true;
      
      // 1. –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ª—ñ–Ω—ñ—ó (–≤–æ–Ω–∏ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é)
      document.getElementById('connectionLayer').innerHTML = '';
      
      // 2. –Ü—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ –≤—Å—ñ–º –º–æ–∂–ª–∏–≤–∏–º –ø–∞—Ä–∞–º —Ü—å–æ–≥–æ –µ—Ç–∞–ø—É
      this.stageQuestions.forEach(q => {
          const qId = q.id;
          const trueAnswer = this.getRandomElement(q.answers.filter(a => a.isCorrect));
          const trueAId = trueAnswer.id; // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î —Ç–æ–π —Å–∞–º–∏–π ID, —â–æ —ñ –ø–∏—Ç–∞–Ω–Ω—è

          const userAnswerAId = this.currentConnections[qId];
          const questionEl = document.querySelector(`.question-item[data-id="${qId}"]`);
          const answerEl = document.querySelector(`.answer-item[data-id="${userAnswerAId}"]`);
          const color = this.questionColorMap[qId];
          
          questionEl.classList.remove('active-select', 'has-connection');
          
          // 3. –í–∞–ª—ñ–¥–∞—Ü—ñ—è
          const isCorrect = userAnswerAId && (qId === userAnswerAId); // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ ID
          
          if (isCorrect) {
              stageCorrectCount++;
              questionEl.classList.add('correct');
              answerEl.classList.add('correct');
              this.drawResultLine(questionEl, answerEl, color, true); // –ó–µ–ª–µ–Ω–∞ –ª—ñ–Ω—ñ—è
          } else {
              stageMistakes++;
              this.globalMistakesCount++;
              
              // –ß–µ—Ä–≤–æ–Ω–∞ –ª—ñ–Ω—ñ—è –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Å–ø—Ä–æ–±–∏ (—è–∫—â–æ —Å–ø—Ä–æ–±–∞ –±—É–ª–∞)
              if (answerEl) {
                  questionEl.classList.add('wrong');
                  answerEl.classList.add('wrong');
                  this.drawResultLine(questionEl, answerEl, color, false); // –ß–µ—Ä–≤–æ–Ω–∞ –ª—ñ–Ω—ñ—è
              } else {
                  // –ü–∏—Ç–∞–Ω–Ω—è –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                  questionEl.classList.add('wrong');
                  // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–∞—Ä—É –∑–µ–ª–µ–Ω–∏–º (—â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ –º–∞–ª–æ –±—É—Ç–∏)
                  const correctElement = document.querySelector(`.answer-item[data-id="${qId}"]`);
                  if (correctElement) {
                     this.drawResultLine(questionEl, correctElement, '#2ecc71', true);
                  }
              }
          }
      });
      
      // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
      document.querySelectorAll('.matching-item').forEach(el => el.disabled = true);
      
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
      this.updateMistakesUI();
      
      // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
      setTimeout(() => {
          this.currentStageIndex++;
          this.loadStage(this.currentStageIndex);
      }, 2000);
  }
  
  /**
   * –ú–∞–ª—é—î —Ñ—ñ–Ω–∞–ª—å–Ω—É –ª—ñ–Ω—ñ—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (–∑–µ–ª–µ–Ω—É/—á–µ—Ä–≤–æ–Ω—É)
   */
  drawResultLine(qEl, aEl, color, isCorrect) {
      const connectionLayer = document.getElementById('connectionLayer');
      if (!connectionLayer || !qEl || !aEl) return;
      
      const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
      const finalColor = isCorrect ? '#2ecc71' : '#e74c3c';

      line.setAttribute('stroke', finalColor); 
      line.setAttribute('stroke-width', 3);
      
      // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      const qRect = qEl.getBoundingClientRect();
      const aRect = aEl.getBoundingClientRect();
      const layerRect = connectionLayer.getBoundingClientRect();

      const x1 = qRect.right - layerRect.left;
      const y1 = qRect.top + qRect.height / 2 - layerRect.top;
      const x2 = aRect.left - layerRect.left;
      const y2 = aRect.top + aRect.height / 2 - layerRect.top;

      line.setAttribute('x1', x1);
      line.setAttribute('y1', y1);
      line.setAttribute('x2', x2);
      line.setAttribute('y2', y2);
      
      connectionLayer.appendChild(line);
      
      // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç
      aEl.style.backgroundColor = finalColor + '44'; 
      aEl.style.color = finalColor;
  }

  updateProgressUI() {
    const totalAnswered = this.currentStageIndex * this.config.pairsPerStage + 
                          (this.currentStageIndex > 0 ? this.stageQuestions.length : 0);
    const total = this.testQuestions.length;
    
    document.getElementById('progressText').textContent = 
        `${totalAnswered} / ${total} –ø—Ä–æ–π–¥–µ–Ω–æ`;
  }
  
  updateMistakesUI() {
    document.getElementById('mistakesCounter').textContent = 
        `‚úó –ü–æ–º–∏–ª–æ–∫: ${this.globalMistakesCount}`;
  }

  finishTest() {
    this.stopTimer(); 
    const timeSpent = Math.round((Date.now() - this.startTime) / 1000);
    const totalPossiblePairs = this.testQuestions.length;
    
    // –í –¥–∞–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ "–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å" - —Ü–µ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –µ—Ç–∞–ø
    const correctStageCount = this.currentStageIndex; 
    
    const results = {
      pluginId: this.constructor.metadata.id,
      totalQuestions: totalPossiblePairs, 
      answeredQuestions: totalPossiblePairs,
      correctCount: totalPossiblePairs - this.globalMistakesCount, // –£—Å–ø—ñ—à–Ω–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω—ñ –ø–∞—Ä–∏
      mistakesCount: this.globalMistakesCount, 
      percentage: totalPossiblePairs > 0 
                  ? Math.round(((totalPossiblePairs - this.globalMistakesCount) / totalPossiblePairs) * 100) 
                  : 0,
      timeSpent,
      questions: this.testQuestions,
      userAnswers: { 
          stagesCompleted: this.currentStageIndex,
          totalMistakes: this.globalMistakesCount 
      }, 
      config: this.config,
      timestamp: Date.now(),
    };
    
    window.quizController.saveResults(results);
    window.quizController.showScreen('results');
    this.renderResults(document.getElementById('results'), results);
  }

  // ==================== HELPER –ú–ï–¢–û–î–ò ====================

  chunkArray(array, size) {
    const chunkedArr = [];
    for (let i = 0; i < array.length; i += size) {
        chunkedArr.push(array.slice(i, i + size));
    }
    return chunkedArr;
  }
  
  stopTimer() {
    if (this.timer) {
      clearInterval(this.timer);
      this.timer = null;
    }
  }

  shuffle(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }
  
  getRandomElement(array) {
    if (!array || array.length === 0) return null;
    return array[Math.floor(Math.random() * array.length)];
  }

  extractCategories(questions) {
    const categories = new Set();
    questions.forEach(q => {
      if (q.category) {
        categories.add(q.category);
      }
    });
    return Array.from(categories).sort();
  }
  
  attachCategoryHandlers(allCategories) {
    const selectAllCheckbox = document.getElementById('selectAllCategories');
    const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
    
    const updateSelectAll = () => {
      const allChecked = Array.from(categoryCheckboxes).every(cb => cb.checked);
      selectAllCheckbox.checked = allChecked;
    };
    
    selectAllCheckbox.addEventListener('change', () => {
      categoryCheckboxes.forEach(cb => {
        cb.checked = selectAllCheckbox.checked;
      });
    });
    
    categoryCheckboxes.forEach(cb => {
      cb.addEventListener('change', updateSelectAll);
    });
    
    updateSelectAll();
  }

  renderResults(container, results) {
    const isSuccess = results.percentage >= 70;

    container.innerHTML = `
      <div class="results-container">
        <div class="results-header ${isSuccess ? 'success' : 'fail'}">
          <div class="results-icon">üîó</div>
          <h1 class="results-percentage">${results.percentage}%</h1>
          <p class="results-status">${isSuccess ? '–í—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' : '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏'}</p>
        </div>
        
        <div class="results-stats">
          <div class="stat-card">
            <div class="stat-value">${results.correctCount} / ${results.totalQuestions}</div>
            <div class="stat-label">–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö –ø–∞—Ä</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value">${results.mistakesCount}</div>
            <div class="stat-label">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Å–ø—Ä–æ–± (—Å—É–º–∞—Ä–Ω–æ)</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value">${Math.floor(results.timeSpent / 60)}:${(results.timeSpent % 60).toString().padStart(2, '0')}</div>
            <div class="stat-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å—É</div>
          </div>

          <div class="stat-card">
            <div class="stat-value">${results.userAnswers.stagesCompleted} / ${this.stages.length}</div>
            <div class="stat-label">–ï—Ç–∞–ø—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ</div>
          </div>
        </div>
        
        <div class="results-actions">
          <button class="btn-primary" id="retakeBtn">üîÑ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑</button>
          <button class="btn-ghost" id="backToTestsBtn">‚Üê –ù–∞–∑–∞–¥ –¥–æ —Ç–µ—Å—Ç—ñ–≤</button>
        </div>
      </div>
    `;
    
    document.getElementById('retakeBtn').addEventListener('click', () => {
      window.quizController.showScreen('setup');
      this.renderSetup(
        document.getElementById('setup'),
        window.quizController.testData,
        this.constructor.filterQuestions(window.quizController.testData.questions)
      );
    });
    
    document.getElementById('backToTestsBtn').addEventListener('click', () => {
      window.location.href = 'index.html';
    });
  }
}