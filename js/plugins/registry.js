/**
 * PluginRegistry - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Ä–µ—î—Å—Ç—Ä –≤—Å—ñ—Ö –ø–ª–∞–≥—ñ–Ω—ñ–≤ —Ä–µ–∂–∏–º—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */

import MultipleChoicePlugin from './multiple-choice.js';
import FlashcardPlugin from './flashcard.js';
import TrueFalsePlugin from './true-false.js';
import MatchingPlugin from './matching-plugin.js';

class PluginRegistry {
  constructor() {
    this.plugins = new Map();
    this.config = null;
  }
  
  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
   * @param {Object} config - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ tests.json
   */
  async initialize(config) {
    this.config = config;
    console.log('üîå Initializing Plugin Registry...');
    
    // –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∏
    this.register(MultipleChoicePlugin);
    this.register(FlashcardPlugin);
    this.register(TrueFalsePlugin);
    this.register(MatchingPlugin);
    
    console.log(`‚úÖ Registered ${this.plugins.size} plugins`);
  }
  
  /**
   * –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø–ª–∞–≥—ñ–Ω
   * @param {Class} PluginClass - –∫–ª–∞—Å –ø–ª–∞–≥—ñ–Ω–∞
   */
  register(PluginClass) {
    const metadata = PluginClass.metadata;
    
    if (!metadata || !metadata.id) {
      console.error('‚ùå Plugin must have metadata with id', PluginClass);
      return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–ª–∞–≥—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É
    const pluginConfig = this.config?.plugins?.[metadata.id];
    
    if (pluginConfig && pluginConfig.enabled === false) {
      console.log(`‚è∏Ô∏è  Plugin ${metadata.id} is disabled in config`);
      return;
    }
    
    this.plugins.set(metadata.id, PluginClass);
    console.log(`  ‚úì ${metadata.icon} ${metadata.name} (${metadata.id})`);
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∏
   * @returns {Array<Class>} –º–∞—Å–∏–≤ –∫–ª–∞—Å—ñ–≤ –ø–ª–∞–≥—ñ–Ω—ñ–≤
   */
  getAll() {
    return Array.from(this.plugins.values());
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–ª–∞–≥—ñ–Ω –∑–∞ ID
   * @param {string} id - ID –ø–ª–∞–≥—ñ–Ω–∞
   * @returns {Class|null} –∫–ª–∞—Å –ø–ª–∞–≥—ñ–Ω–∞ –∞–±–æ null
   */
  get(id) {
    return this.plugins.get(id) || null;
  }
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–ª–∞–≥—ñ–Ω –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
   * @param {string} id - ID –ø–ª–∞–≥—ñ–Ω–∞
   * @returns {boolean}
   */
  has(id) {
    return this.plugins.has(id);
  }
  
  /**
   * –ó–Ω–∞–π—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç—É
   * @param {Object} testData - –¥–∞–Ω—ñ —Ç–µ—Å—Ç—É
   * @returns {Array<Object>} –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ { pluginClass, metadata, validation }
   */
  getSupportedPlugins(testData) {
    const supported = [];
    
    console.log(`üîç Validating plugins for test: ${testData.meta.title}`);
    
    for (const [id, PluginClass] of this.plugins) {
      const validation = PluginClass.validate(testData);
      
      if (validation.valid) {
        supported.push({
          pluginClass: PluginClass,
          metadata: PluginClass.metadata,
          validation: validation
        });
        
        console.log(`  ‚úÖ ${PluginClass.metadata.icon} ${PluginClass.metadata.name}: ${validation.supportedCount}/${validation.totalCount} –ø–∏—Ç–∞–Ω—å (${validation.percentage}%)`);
      } else {
        console.log(`  ‚ùå ${PluginClass.metadata.icon} ${PluginClass.metadata.name}: ${validation.reason}`);
      }
    }
    
    console.log(`‚úÖ Found ${supported.length} supported mode(s)`);
    
    return supported;
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ –≤—Å—ñ—Ö –ø–ª–∞–≥—ñ–Ω—ñ–≤
   * @returns {Array<Object>} –º–∞—Å–∏–≤ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
   */
  getAllMetadata() {
    return Array.from(this.plugins.values()).map(PluginClass => PluginClass.metadata);
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä
   */
  clear() {
    this.plugins.clear();
    this.config = null;
  }
}

// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const pluginRegistry = new PluginRegistry();

export default pluginRegistry;
