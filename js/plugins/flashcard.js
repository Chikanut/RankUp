/**
 * Flashcard Plugin
 * * –†–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Ñ–ª–µ—à–∫–∞—Ä—Ç–∫–∏ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è–º.
 * –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∑–≥–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å,
 * –ø–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å–µ–±–µ —Ç–∞ —á–µ—Å–Ω–æ –æ—Ü—ñ–Ω—é—î —á–∏ –∑–Ω–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
 */

import BasePlugin from './base-plugin.js';

export default class FlashcardPlugin extends BasePlugin {
  
  // ==================== –ú–ï–¢–ê–î–ê–ù–Ü (–í–Ü–î–ü–û–í–Ü–î–ê–Ñ BASE-PLUGIN) ====================
  
  static get metadata() {
    return {
      id: 'flashcard',
      name: '–§–ª–µ—à–∫–∞—Ä—Ç–∫–∏ (–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞)',
      icon: 'üìá',
      description: '–ê–∫—Ç–∏–≤–Ω–µ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑ –ª—ñ–º—ñ—Ç–æ–º –ø–æ–º–∏–ª–æ–∫ —Ç–∞ —á–∞—Å—É'
    };
  }

  // ==================== –í–ê–õ–Ü–î–ê–¶–Ü–Ø (–í–Ü–î–ü–û–í–Ü–î–ê–Ñ BASE-PLUGIN) ====================
  
  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–∫—Ä–µ–º–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
   * @param {Object} question - –æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
   * @returns {boolean} true —è–∫—â–æ –ø–ª–∞–≥—ñ–Ω –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ü–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º
   */
  static supportsQuestion(question) {
    if (!question || typeof question !== 'object') return false;
    if (!question.question || typeof question.question !== 'string') return false;
    
    if (!Array.isArray(question.answers) || question.answers.length === 0) return false;
    
    // –ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    const hasCorrect = question.answers.some(a => a.isCorrect === true);
    return hasCorrect;
  }
  
  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω—å –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏.
   * –£—Å–ø–∞–¥–∫–æ–≤—É—î–º–æ –ª–æ–≥—ñ–∫—É –≤—ñ–¥ BasePlugin.
   * @param {Array} questions - –º–∞—Å–∏–≤ –ø–∏—Ç–∞–Ω—å
   * @returns {Array} –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
   */
  static filterQuestions(questions) {
    // –í FlashcardPlugin –º–∏ –º–æ–∂–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—Å—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
    return questions.filter(q => this.supportsQuestion(q));
  }
  
  // ==================== –ö–û–ù–°–¢–†–£–ö–¢–û–† –¢–ê –°–¢–ê–ù ====================
  
  constructor() {
    super();
    this.currentQuestion = null;
    this.isRevealed = false;
    this.currentAnswer = null;
    this.questionsToReview = []; 
    this.knownQuestionsIds = new Set();
    this.allSupportedQuestions = []; // –£—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–ª–∞–≥—ñ–Ω
    this.testQuestions = []; // –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ç–∞ –≤–∏–±—Ä–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
    this.currentQuestionIndex = 0;
    this.userResults = [];
    this.startTime = null;
    this.timeLimitTimer = null;
    this.remainingTime = 0;
    this.mistakesCount = 0;
  }
  
  // ==================== SETUP (–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø) ====================
  
  /**
   * –†–µ–Ω–¥–µ—Ä —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–µ—Å—Ç—É
   * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
   * @param {Object} testData - –¥–∞–Ω—ñ —Ç–µ—Å—Ç—É
   * @param {Array} questions - –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è (—É—Å—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ)
   */
  renderSetup(container, testData, questions) {
    this.allSupportedQuestions = questions;
    const allCategories = this.extractCategories(questions);
    const maxQuestions = questions.length;
    
    const defaultSettings = {
      repeatUnknown: true,
      shuffleQuestions: true,
      questionCount: Math.min(20, maxQuestions),
      maxMistakes: 5,
      timeLimitMinutes: 0,
      selectedCategories: allCategories, // –£—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    };
    
    // –Ø–∫—â–æ —î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —ó—Ö –º–æ–∂–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
    const settings = defaultSettings; 
    
    const maxSelectable = maxQuestions > 0 ? maxQuestions : 1;

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    const categoryCheckboxes = allCategories.map(category => `
      <div class="checkbox-group">
        <input 
          type="checkbox" 
          id="cat-${category}" 
          value="${category}" 
          ${settings.selectedCategories.includes(category) ? 'checked' : ''} 
          class="category-checkbox"
        />
        <label for="cat-${category}">${category}</label>
      </div>
    `).join('');

    container.innerHTML = `
      <div class="setup-container">
        <h2>‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –†–µ–∂–∏–º—É –§–ª–µ—à–∫–∞—Ä—Ç–æ–∫</h2>
        <p class="muted">–¢–µ–º–∞: ${testData.meta.title}</p>
        <p class="muted">–î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—Ä—Ç–æ–∫: ${maxQuestions}</p>
        
        <div class="setup-grid category-grid-enabled">
          
          <div class="setup-section categories-section">
            <h3>üóÇÔ∏è –í–∏–±—ñ—Ä –ö–∞—Ç–µ–≥–æ—Ä—ñ–π</h3>
            <p class="hint">–û–±–µ—Ä—ñ—Ç—å, –∑ —è–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –±—Ä–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.</p>
            <div class="category-list">
              <div class="checkbox-group">
                <input type="checkbox" id="selectAllCategories" checked />
                <label for="selectAllCategories"><strong>–í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</strong></label>
              </div>
              <div class="category-items">
                ${categoryCheckboxes}
              </div>
            </div>
          </div>
          
          <div class="setup-section options-section">
            <h3>–õ—ñ–º—ñ—Ç–∏ —Ç–∞ –ö—Ä–∏—Ç–µ—Ä—ñ—ó</h3>
            
            <div class="input-group">
              <label for="questionCount">üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫:</label>
              <input type="number" id="questionCount" min="1" max="${maxSelectable}" value="${Math.min(settings.questionCount, maxSelectable)}" />
              <span class="hint">–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è. (–ú–∞–∫—Å. ${maxQuestions})</span>
            </div>

            <div class="input-group">
              <label for="maxMistakes">‚ùå –ú–∞–∫—Å. –ø–æ–º–∏–ª–æ–∫:</label>
              <input type="number" id="maxMistakes" min="0" value="${settings.maxMistakes}" />
              <span class="hint">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫, —è–∫—ñ –º–æ–∂–Ω–∞ "–Ω–µ –∑–Ω–∞—Ç–∏". 0 = –±–µ–∑ –ª—ñ–º—ñ—Ç—É.</span>
            </div>
            
            <div class="input-group">
              <label for="timeLimitMinutes">‚è≥ –õ—ñ–º—ñ—Ç —á–∞—Å—É (—Ö–≤):</label>
              <input type="number" id="timeLimitMinutes" min="0" value="${settings.timeLimitMinutes}" />
              <span class="hint">–ß–∞—Å, –≤—ñ–¥–≤–µ–¥–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è. 0 = –±–µ–∑ –ª—ñ–º—ñ—Ç—É.</span>
            </div>
            
            <h3 class="mt-4">–û–ø—Ü—ñ—ó —Ä–µ–∂–∏–º—É</h3>
            <div class="checkbox-group">
              <input type="checkbox" id="repeatUnknown" ${settings.repeatUnknown ? 'checked' : ''} />
              <label for="repeatUnknown">
                <strong>üîÑ –ü–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –Ω–µ–≤—ñ–¥–æ–º—ñ –∫–∞—Ä—Ç–∫–∏</strong>
                <span class="hint">–ö–∞—Ä—Ç–∫–∏, —è–∫—ñ –≤–∏ –ø–æ–∑–Ω–∞—á–∏–ª–∏ —è–∫ "–ù–µ –∑–Ω–∞–≤", –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –≤ —á–µ—Ä–≥—É.</span>
              </label>
            </div>
            
            <div class="checkbox-group">
              <input type="checkbox" id="shuffleQuestions" ${settings.shuffleQuestions ? 'checked' : ''} />
              <label for="shuffleQuestions">
                <strong>üîÄ –ü–µ—Ä–µ–º—ñ—à–∞—Ç–∏ –∫–∞—Ä—Ç–∫–∏</strong>
                <span class="hint">–í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ–∫.</span>
              </label>
            </div>

            <p class="muted mt-3">‚ú® –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç—É —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞–≤–∂–¥–∏ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ.</p>
          </div>
        </div>

        <div class="setup-actions">
          <button class="btn-primary btn-large" id="startFlashcardTestBtn">
            üöÄ –ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
          </button>
          <button class="btn-ghost" id="backToModeBtn">
            ‚Üê –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É
          </button>
        </div>
      </div>
    `;
    
    // –û–±—Ä–æ–±–Ω–∏–∫–∏
    document.getElementById('startFlashcardTestBtn').addEventListener('click', () => {
      this.startTest();
    });
    
    document.getElementById('backToModeBtn').addEventListener('click', () => {
      window.quizController.showModeSelection(); 
    });
    
    this.attachCategoryHandlers(allCategories);
  }
  
  /**
   * –í–∏—Ç—è–≥–Ω—É—Ç–∏ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø–∏—Ç–∞–Ω—å
   */
  extractCategories(questions) {
    const categories = new Set();
    questions.forEach(q => {
      if (q.category) {
        categories.add(q.category);
      }
    });
    return Array.from(categories).sort();
  }
  
  /**
   * –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
   */
  attachCategoryHandlers(allCategories) {
    const selectAllCheckbox = document.getElementById('selectAllCategories');
    const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
    
    const updateSelectAll = () => {
      const allChecked = Array.from(categoryCheckboxes).every(cb => cb.checked);
      selectAllCheckbox.checked = allChecked;
    };
    
    selectAllCheckbox.addEventListener('change', () => {
      categoryCheckboxes.forEach(cb => {
        cb.checked = selectAllCheckbox.checked;
      });
    });
    
    categoryCheckboxes.forEach(cb => {
      cb.addEventListener('change', updateSelectAll);
    });
    
    // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    updateSelectAll();
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Object} –æ–±'—î–∫—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
   */
  getSetupConfig() {
    const selectedCategories = Array.from(document.querySelectorAll('.category-checkbox:checked'))
      .map(cb => cb.value);
      
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω—å
    let requestedCount = parseInt(document.getElementById('questionCount')?.value) || this.allSupportedQuestions.length;
    requestedCount = Math.max(1, Math.min(requestedCount, this.allSupportedQuestions.length));
    
    return {
      repeatUnknown: document.getElementById('repeatUnknown')?.checked ?? false,
      shuffleQuestions: document.getElementById('shuffleQuestions')?.checked ?? true,
      questionCount: requestedCount,
      maxMistakes: parseInt(document.getElementById('maxMistakes')?.value) || 0,
      timeLimitMinutes: parseInt(document.getElementById('timeLimitMinutes')?.value) || 0,
      selectedCategories: selectedCategories,
      flipAnimation: true,
      showComment: true,
    };
  }

  // ==================== QUIZ (–¢–ï–°–¢–£–í–ê–ù–ù–Ø) ====================
  
  startTest() {
    this.config = this.getSetupConfig();
    
    // 1. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–∏—Ç–∞–Ω—å –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    let questions = this.allSupportedQuestions.filter(q => 
      this.config.selectedCategories.includes(q.category)
    );
    
    if (questions.length === 0) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏.');
      return;
    }
    
    // 2. –ü–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è
    if (this.config.shuffleQuestions) {
      questions = this.shuffle(questions);
    }
    
    // 3. –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω—å
    this.testQuestions = questions.slice(0, this.config.questionCount);
    
    // 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
    this.currentQuestionIndex = 0;
    this.userResults = [];
    this.questionsToReview = this.config.repeatUnknown ? [...this.testQuestions] : [];
    this.knownQuestionsIds.clear();
    this.startTime = Date.now();
    this.mistakesCount = 0;
    
    // 5. –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    this.startTimer(this.config.timeLimitMinutes);
    
    // 6. –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç—É
    window.quizController.showScreen('quiz');
    this.renderQuizInterface(document.getElementById('quiz'));
    
    // 7. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
    this.showQuestion(this.getNextQuestion());
  }
  
  startTimer(minutes) {
    if (this.timeLimitTimer) {
      clearInterval(this.timeLimitTimer);
    }
    
    if (minutes > 0) {
      this.remainingTime = minutes * 60; // —á–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö
      
      this.timeLimitTimer = setInterval(() => {
        this.remainingTime--;
        this.updateTimeUI();
        
        if (this.remainingTime <= 0) {
          clearInterval(this.timeLimitTimer);
          alert('‚è∞ –ß–∞—Å –≤–∏—á–µ—Ä–ø–∞–Ω–æ! –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
          this.finishTest(true); 
        }
      }, 1000);
    } else {
      this.updateTimeUI(); 
    }
  }

  stopTimer() {
    if (this.timeLimitTimer) {
      clearInterval(this.timeLimitTimer);
      this.timeLimitTimer = null;
    }
  }

  updateTimeUI() {
    const timeEl = document.getElementById('timeCounter');
    if (!timeEl) return;
    
    if (this.config.timeLimitMinutes > 0) {
      const minutes = Math.floor(this.remainingTime / 60);
      const seconds = this.remainingTime % 60;
      timeEl.textContent = `‚è≥ ${minutes}:${seconds.toString().padStart(2, '0')}`;
    } else {
      timeEl.textContent = '‚è≥ –ë–µ–∑ –ª—ñ–º—ñ—Ç—É';
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
   * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
   */
  renderQuizInterface(container) {
    this.clearContainer(container);
    
    container.innerHTML = `
      <div class="quiz-container flashcard-quiz-container">
        <div class="quiz-meta">
          <div class="meta-left">
            <span class="badge">üìá –§–ª–µ—à–∫–∞—Ä—Ç–∫–∏</span>
            <span class="badge" id="timeCounter"></span>
          </div>
          <div class="meta-right">
            <span class="badge badge-error" id="mistakesCounter">
              ‚ùå –ü–æ–º–∏–ª–æ–∫: 0${this.config.maxMistakes > 0 ? ` / ${this.config.maxMistakes}` : ''}
            </span>
          </div>
        </div>
        
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill" style="width: 0%"></div>
        </div>

        <div id="questionCardContainer">
          </div>

        <div class="quiz-actions">
          <button class="btn-ghost" id="endEarlyBtn">–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è</button>
        </div>
      </div>
    `;
    
    this.updateTimeUI();
    document.getElementById('endEarlyBtn').addEventListener('click', () => {
      if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è?')) {
        this.finishTest();
      }
    });
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è (–≤–∫–ª—é—á–∞—é—á–∏ –ª–æ–≥—ñ–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è)
   */
  getNextQuestion() {
    if (this.config.repeatUnknown && this.questionsToReview.length > 0) {
      return this.questionsToReview.shift();
    }
    
    if (this.currentQuestionIndex >= this.testQuestions.length) {
      return null;
    }
    
    const question = this.testQuestions[this.currentQuestionIndex];
    this.currentQuestionIndex++;
    return question;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è (—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–∫–∏)
   * @param {Object} question - –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   */
  showQuestion(question) {
    if (!question) {
      this.finishTest();
      return;
    }
    
    this.currentQuestion = question;
    this.isRevealed = false;
    
    this.currentAnswer = question.answers.find(a => a.isCorrect);
    if (!this.currentAnswer) {
      this.currentAnswer = { text: '–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' };
    }
    
    const animationClass = this.config.flipAnimation ? 'with-animation' : '';
    const container = document.getElementById('questionCardContainer');
    
    const questionId = question.id || `q-${this.currentQuestionIndex}-${Date.now()}`;
    
    container.innerHTML = `
      <div class="flashcard-container ${animationClass}" data-question-id="${questionId}">
        <div class="flashcard" id="flashcard-${questionId}">
          
          <div class="flashcard-side flashcard-front">
            <div class="flashcard-content">
              <div class="flashcard-header">
                <span class="badge">${question.category || '–ó–∞–≥–∞–ª—å–Ω–∞'}</span>
                <span class="badge">–ö–∞—Ä—Ç–∫–∞ ${this.currentQuestionIndex} / ${this.config.questionCount}</span>
              </div>
              
              <div class="flashcard-question">
                <h2>${question.question}</h2>
              </div>
              
              <div class="flashcard-hint">
                <p class="muted">üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–≥–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ —Ä–æ–∑–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É</p>
              </div>
              
              <div class="flashcard-action">
                <button class="btn-primary btn-large" id="revealBtn">
                  –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                </button>
              </div>
            </div>
          </div>
          
          <div class="flashcard-side flashcard-back">
            <div class="flashcard-content">
              <div class="flashcard-header">
                <span class="badge badge-success">‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å</span>
              </div>
              
              <div class="flashcard-question-small">
                <strong>–ü–∏—Ç–∞–Ω–Ω—è:</strong>
                <p>${question.question}</p>
              </div>
              
              <div class="flashcard-answer">
                <h3>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</h3>
                <p>${this.currentAnswer.text}</p>
              </div>
              
              ${this.config.showComment && question.comment ? `
                <div class="flashcard-comment">
                  <p class="muted"><strong>‚ÑπÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä:</strong> ${question.comment}</p>
                </div>
              ` : ''}
              
              <div class="flashcard-separator"></div>
              
              <div class="flashcard-self-check">
                <h4>–í–∏ –∑–Ω–∞–ª–∏ —Ü—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å?</h4>
                <div class="self-check-buttons">
                  <button class="btn-success btn-large" data-knew="true">
                    ‚úì –ó–Ω–∞–≤
                  </button>
                  <button class="btn-error btn-large" data-knew="false">
                    ‚úó –ù–µ –∑–Ω–∞–≤
                  </button>
                </div>
              </div>
            </div>
          </div>
          
        </div>
      </div>
    `;
    
    this.updateProgressUI();
    this.attachEventHandlers();
  }
  
  /**
   * –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–∞—Ä—Ç–∫–∏
   */
  attachEventHandlers() {
    const revealBtn = document.getElementById('revealBtn');
    if (revealBtn) {
      revealBtn.addEventListener('click', () => this.revealAnswer());
    }
    
    const selfCheckButtons = document.querySelectorAll('.self-check-buttons button');
    selfCheckButtons.forEach(btn => {
      btn.addEventListener('click', (e) => {
        const knew = e.target.dataset.knew === 'true';
        this.handleAnswer(knew);
      });
    });
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏ –∫–∞—Ä—Ç–∫—É)
   */
  revealAnswer() {
    if (this.isRevealed) return;
    this.isRevealed = true;
    
    const questionId = this.currentQuestion.id || `q-${this.currentQuestionIndex}-${Date.now()}`;
    const flashcard = document.getElementById(`flashcard-${questionId}`);

    if (flashcard) {
      if (this.config.flipAnimation) {
        flashcard.classList.add('flipped');
      } else {
        const front = flashcard.querySelector('.flashcard-front');
        const back = flashcard.querySelector('.flashcard-back');
        if (front && back) {
          front.style.display = 'none';
          back.style.display = 'block';
        }
      }
    }
    
    const revealBtn = document.getElementById('revealBtn');
    if (revealBtn) {
      revealBtn.disabled = true;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–∞–º–æ–æ—Ü—ñ–Ω–∫–∞)
   */
  handleAnswer(knew) {
    document.querySelectorAll('.self-check-buttons button').forEach(btn => btn.disabled = true);
    
    const isCorrect = knew;
    
    const result = {
      questionId: this.currentQuestion.id,
      isCorrect: isCorrect,
      userAnswer: knew ? '–ó–Ω–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å' : '–ù–µ –∑–Ω–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å',
      correctAnswer: this.currentAnswer.text,
      timestamp: Date.now(),
      timeTaken: (Date.now() - this.startTime) / 1000, 
    };
    
    this.userResults.push(result);
    
    if (!knew) {
      this.mistakesCount++;
      
      if (this.config.maxMistakes > 0 && this.mistakesCount >= this.config.maxMistakes) {
        alert(`‚ùå –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –≤ ${this.config.maxMistakes} –ø–æ–º–∏–ª–æ–∫! –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`);
        this.finishTest(true);
        return;
      }
      
      if (this.config.repeatUnknown && !this.questionsToReview.some(q => q.id === this.currentQuestion.id)) {
         this.questionsToReview.push(this.currentQuestion);
      }
    } else {
      this.knownQuestionsIds.add(this.currentQuestion.id);
    }
    
    this.updateMistakesUI();
    
    setTimeout(() => {
      this.showQuestion(this.getNextQuestion());
    }, 500);
  }
  
  finishTest(wasForced = false) {
    this.stopTimer(); 
    const timeSpent = Math.round((Date.now() - this.startTime) / 1000);
    
    const results = {
      totalQuestions: this.testQuestions.length,
      answeredQuestions: this.userResults.length,
      knownCards: this.userResults.filter(r => r.isCorrect).length,
      mistakesCount: this.mistakesCount, 
      percentage: this.testQuestions.length > 0 ? Math.round((this.knownQuestionsIds.size / this.testQuestions.length) * 100) : 0,
      timeSpent,
      timeLimitReached: wasForced && this.remainingTime <= 0,
      mistakeLimitReached: wasForced && this.mistakesCount >= this.config.maxMistakes,
      questions: this.testQuestions,
      userAnswers: this.userResults,
      config: this.config
    };
    
    window.quizController.saveResults(results);
    window.quizController.showScreen('results');
    this.renderResults(document.getElementById('results'), results);
  }

  // ==================== RESULTS (–†–ï–ó–£–õ–¨–¢–ê–¢–ò) ====================
  
  /**
   * –†–µ–Ω–¥–µ—Ä –µ–∫—Ä–∞–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
   * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
   * @param {Object} results - –æ–±'—î–∫—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç—É
   */
  renderResults(container, results) {
    const totalCards = results.totalQuestions;
    const knownCards = results.knownCards;
    const knowledgeRate = results.percentage;
    const mistakes = results.mistakesCount;
    const isSuccess = !results.timeLimitReached && !results.mistakeLimitReached && (totalCards === 0 || knowledgeRate >= 70);

    let statusText = '';
    if (results.timeLimitReached) {
      statusText = '‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –í–∏—á–µ—Ä–ø–∞–Ω–æ —á–∞—Å!';
    } else if (results.mistakeLimitReached) {
      statusText = `‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç—É (${results.config.maxMistakes}) –ø–æ–º–∏–ª–æ–∫!`;
    } else if (knownCards === 0 && results.answeredQuestions > 0) {
      statusText = 'ü§î –°—Ö–æ–∂–µ, –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è';
    } else if (knowledgeRate === 100) {
      statusText = 'ü•≥ –Ü–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
    } else if (knowledgeRate >= 70) {
      statusText = 'üëç –í—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
    } else {
      statusText = '–ü–æ—Ç—Ä—ñ–±–Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è';
    }

    container.innerHTML = `
      <div class="results-container">
        <div class="results-header ${isSuccess ? 'success' : 'fail'}">
          <div class="results-icon">üìá</div>
          <h1 class="results-percentage">${knowledgeRate}%</h1>
          <p class="results-status">${statusText}</p>
        </div>
        
        <div class="results-stats">
          <div class="stat-card">
            <div class="stat-value">${knownCards} / ${totalCards}</div>
            <div class="stat-label">–ö–∞—Ä—Ç–∫–∏, —è–∫—ñ –∑–Ω–∞–≤</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value">${mistakes}</div>
            <div class="stat-label">–ö–∞—Ä—Ç–∫–∏, —è–∫—ñ –Ω–µ –∑–Ω–∞–≤</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value">${Math.floor(results.timeSpent / 60)}:${(results.timeSpent % 60).toString().padStart(2, '0')}</div>
            <div class="stat-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å—É</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value">${results.answeredQuestions}</div>
            <div class="stat-label">–ü–∏—Ç–∞–Ω—å –ø—Ä–æ–π–¥–µ–Ω–æ</div>
          </div>
        </div>
        
        <div class="results-actions">
          <button class="btn-primary" id="retakeBtn">üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏</button>
          <button class="btn-ghost" id="backToTestsBtn">‚Üê –ù–∞–∑–∞–¥ –¥–æ —Ç–µ—Å—Ç—ñ–≤</button>
        </div>
      </div>
    `;
    
    document.getElementById('retakeBtn').addEventListener('click', () => {
      window.quizController.showScreen('setup');
      this.renderSetup(
        document.getElementById('setup'),
        window.quizController.testData,
        this.constructor.filterQuestions(window.quizController.testData.questions)
      );
    });
    
    document.getElementById('backToTestsBtn').addEventListener('click', () => {
      window.location.href = 'index.html';
    });
  }
  
  // ==================== HELPER –ú–ï–¢–û–î–ò ====================
  
  /**
   * –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –≤ UI
   */
  updateProgressUI() {
    const totalCards = this.testQuestions.length;
    const knownCards = this.knownQuestionsIds.size;
    const percentage = totalCards > 0 ? Math.round((knownCards / totalCards) * 100) : 0;

    const progressBar = document.querySelector('.progress-fill');
    if (progressBar) {
      progressBar.style.width = `${percentage}%`;
    }
  }

  /**
   * –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
   */
  updateMistakesUI() {
    const counterEl = document.getElementById('mistakesCounter');
    if (counterEl) {
      const max = this.config.maxMistakes;
      counterEl.textContent = `‚ùå –ü–æ–º–∏–ª–æ–∫: ${this.mistakesCount}${max > 0 ? ` / ${max}` : ''}`;
      counterEl.classList.toggle('critical', max > 0 && this.mistakesCount >= max * 0.8);
    }
  }

  /**
   * –ü–µ—Ä–µ–º—ñ—à–∞—Ç–∏ –º–∞—Å–∏–≤
   */
  shuffle(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }
  
  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è checkAnswer (–ø–æ–≤–µ—Ä—Ç–∞—î —Ç–µ, —â–æ –¥–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, "–∑–Ω–∞–≤" = true)
   */
  checkAnswer(question, userAnswer) {
    return userAnswer === true;
  }
}